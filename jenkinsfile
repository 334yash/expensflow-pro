pipeline {
  agent any
  environment {
    IMAGE_NAME = "expenseflow-expense"
    IMAGE_TAG  = "latest"
    DOCKERHUB_USER = "334yash"
    NAMESPACE  = "prod"
    HELM_CHART_PATH = "./k8s-charts/expenseflow"
  }
  stages {
    stage('Checkout Code') {
      steps { git branch: 'main', url: 'https://github.com/334yash/expensflow-pro.git' }
    }
    stage('Build Docker Image') {
      steps {
        sh """
        docker build -t ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG} ./services/expense-service
        kind load docker-image ${DOCKERHUB_USER}/${IMAGE_NAME}:${IMAGE_TAG} --name expenseflow || true
        """
      }
    }
    stage('Push to Docker Hub') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'dockerhub-cred', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
          sh """
            echo \$DOCKER_PASS | docker login -u \$DOCKER_USER --password-stdin
            docker push \$DOCKER_USER/${IMAGE_NAME}:${IMAGE_TAG}
          """
        }
      }
    }
    stage('Helm Deploy') {
      steps {
        withCredentials([file(credentialsId: 'kubeconfig-cred', variable: 'KUBECONFIG_FILE')]) {
          sh '''
            export KUBECONFIG=${KUBECONFIG_FILE}
            echo "KUBECONFIG in use: ${KUBECONFIG}"
            kubectl get nodes -o wide
            helm upgrade --install expenseflow ${HELM_CHART_PATH} --namespace ${NAMESPACE} --create-namespace
          '''
        }
      }
    }
    stage('Verify Deployment') {
  steps {
    withCredentials([file(credentialsId: 'kubeconfig-cred', variable: 'KUBECONFIG_FILE')]) {
      sh '''
        export KUBECONFIG=${KUBECONFIG_FILE}
        echo "Verifying deployment in namespace ${NAMESPACE}..."
        kubectl get pods -n ${NAMESPACE}
        kubectl get svc -n ${NAMESPACE}
      '''
    }
  }
}

  post {
    success { echo 'CI/CD Pipeline executed successfully! ðŸš€' }
    failure { echo 'Pipeline failed ðŸ˜¢' }
  }
}
